{
	"info": {
		"_postman_id": "5197fc31-e3c9-44cb-af9a-2647e9a51c19",
		"name": "Тестирование раздела Личные события в расписании",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27736149"
	},
	"item": [
		{
			"name": "Добавление нового Личного события",
			"item": [
				{
					"name": "Валидные проверки",
					"item": [
						{
							"name": "Проверка названия",
							"item": [
								{
									"name": "Название с кириллицей",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с названием кириллицей",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с названием кириллицей в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с названием кириллицей",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с названием кириллицей удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Название с латиницей",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с названием латиницей",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с названием латиницей в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с названием латиницей",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с названием латиницей удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Название с числом",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с числом в названии",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Задание2\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с числом в названии в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с числом в названии",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что события с числом в названии удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Название с пробелами",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с пробелами в названии",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с пробелами в названии в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с пробелами в названии",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с пробелами в названии удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка даты",
							"item": [
								{
									"name": "Событие год назад",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'year').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'year').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события год назад",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'year').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'year').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Тестирование\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события год назад в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'year').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'year').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события год назад",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие год назад удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие месяц назад",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события месяц назад",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Exercise\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события месяц назад в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события месяц назад",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие месяц назад удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие вчера",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на вчера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на вчера в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события на вчера",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие на вчера удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие сегодня, но время уже прошло",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на сегодня, но время уже прошло",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(3, 'hour').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(3, 'hour').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"Задание2\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на сегодня, но время уже прошло в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события на сегодня, но время уже прошло",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие на сегодня, но время уже прошло, удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие прямо сейчас",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на время прямо сейчас",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(5, 'minute').startOf('minute').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(14, 'minute').endOf('minute').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на время прямо сейчас в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события на время прямо сейчас",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие на время прямо сейчас удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие сегодня, но еще предстоит",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на сегодня, но еще предстоит",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(3, 'hour').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(3, 'hour').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Тестирование\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на сегодня, но еще предстоит в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события на сегодня, но еще предстоит",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие на сегодня, но еще предстоит, удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие завтра",
									"item": [
										{
											"name": "Получение расписания Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на завтра",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на завтра в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события на завтра",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие на завтра удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие через месяц",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события через месяц",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Exercise\",\r\n    \"title\": \"Задание2\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события через месяц в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события через месяц",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие через месяц удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие через год",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'year').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'year').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события через год",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(526979, 'minute').startOf('minute').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(527039, 'minute').endOf('minute').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Тестирование\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события через год в расписания",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'year').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'year').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события через год",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие через год удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cобытие в то же время, когда уже есть др. событие",
									"item": [
										{
											"name": "Получение расписания Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(3, 'hour').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(3, 'hour').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Событие1\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на то же время, что и прошлое событие",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent2\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt2\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName2\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt2', moment().add(3, 'hour').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent2', moment().add(3, 'hour').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"    \",\r\n    \"title\": \"Событие2\",\r\n    \"startAt\": \"{{startAt2}}\",\r\n    \"endAt\": \"{{endAtEvent2}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события на то же время, что и прошлое событие, в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent2\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что оба события отображаются в календаре",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Оба события отображаются\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\",\"idEvent2\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление первого события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что первое событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление второго события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent2}},\r\n    \"startAt\": \"{{startAt2}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что второе событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Cобытие в то же время, когда уже есть урок",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(10, 'minute').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(7, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск урока в расписании и сохранение времени урока в переменные",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var lessonType = \"regular\"; // Искомый тип урока\r",
															"var lessonType2 = \"single\";\r",
															"\r",
															"var lesson = pm.response.json().data.events.find(function(lesson) {\r",
															"  return lesson.payload.type === lessonType || lesson.payload.type === lessonType2;\r",
															"  \r",
															"});\r",
															"var lessonDate = lesson.startAt,\r",
															"    idClass = lesson.payload.classId,\r",
															"    lessonDuration = lesson.durationSeconds;\r",
															" \r",
															"pm.collectionVariables.set(\"startLesson\", lessonDate);\r",
															"pm.collectionVariables.set(\"idClass\", idClass);\r",
															" \r",
															"if (lesson) {\r",
															"  \r",
															"//  var lessonTime = lesson.time;\r",
															"  console.log(\"Дата создания урока \" + lesson.payload.type + \" (classId: \" + idClass +\"): \" + lessonDate);\r",
															"//  console.log(\"Время урока: \" + lessonTime);\r",
															"} else {\r",
															"  console.log(\"Урок с типом \" + lesson.payload.type + \" не найден.\");\r",
															"}\r",
															"\r",
															"\r",
															"const moment = require('moment');\r",
															"\r",
															"    // Создание объекта Moment.js из значения lessonDate\r",
															"    var startDate = moment(lessonDate);\r",
															"\r",
															"    // Добавление продолжительности в секундах к начальной дате и времени\r",
															"    var endDate = startDate.add(lessonDuration, 'seconds');\r",
															"\r",
															"    // Установка смещения временной зоны на +03:00\r",
															"    endDate = endDate.utcOffset(180);\r",
															"\r",
															"    // Форматирование даты в требуемый формат \"YYYY-MM-DDTHH:mm:ssZ\"\r",
															"    var formattedEndDate = endDate.format(\"YYYY-MM-DDTHH:mm:ssZ\");\r",
															"\r",
															"    // Записывание отформатированной даты в переменную коллекции endLesson\r",
															"    pm.collectionVariables.set(\"endLesson\", formattedEndDate);\r",
															"const myVariable = pm.collectionVariables.get(\"endLesson\");\r",
															"console.log(myVariable);\r",
															"\r",
															"//const timeString = lessonDate;\r",
															"//console.log(lessonDate);\r",
															"// Создание объекта Date из строки времени\r",
															"/*\r",
															"\r",
															"const moment = require('moment');\r",
															"\r",
															"pm.globals.set('time', moment(lessonDate).add(50, 'minute').endOf('minute').format());\r",
															"\r",
															"const myVariable = pm.globals.get(\"time\");\r",
															"console.log(myVariable); // Вывод значения переменной в консоль\r",
															"*/\r",
															"\r",
															"\r",
															"//console.log(time);\r",
															"\r",
															"\r",
															"/*\r",
															"\r",
															"var time = moment(lessonDate).add(1, 'hour');\r",
															"var newTime = time.format();\r",
															"console.log(newTime);\r",
															"\r",
															"\r",
															"var endTime = new Date(lessonDate);\r",
															"//var updatedTimeString = endTime.toISOString();\r",
															"//console.log(updatedTimeString);\r",
															"\r",
															"// Увеличение значения времени на 1 час\r",
															"endTime.setMinutes(endTime.getMinutes() + 50);\r",
															"\r",
															"// Преобразование обновленного значения времени обратно в строку\r",
															"\r",
															"\r",
															"\r",
															"updatedTimeString = endTime.toISOString();\r",
															"const regexPattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}[+\\-]\\d{2}:\\d{2}$/;\r",
															"const dat = endTime.toLocaleDateString(regexPattern)\r",
															"console.log(regexPattern.endTime);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"var currentTime = new Date(lessonDate); // текущая дата и время\r",
															"currentTime.setHours(currentTime.getHours() + 1); // увеличиваем часы на 1\r",
															"\r",
															"console.log(currentTime.toISOString()); // Выведет измененную дату и время\r",
															"\r",
															"//console.log(formattedDateTime);\r",
															"\r",
															"\r",
															"var originalDateTimeString = \"2023-07-20T00:30:00+03:00\";\r",
															"var originalDate = Date.parse(originalDateTimeString);\r",
															"var originalDateTime = new Date(originalDate);\r",
															"originalDateTime.setMinutes(originalDateTime.getMinutes() + 50);\r",
															"var updatedDateTimeString = originalDateTime.toISOString();\r",
															"console.log(updatedDateTimeString);\r",
															"\r",
															"*/\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(10, 'minute').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(7, 'day').endOf('day').format());\r",
															"\r",
															"//const myVariable = pm.globals.get(\"time\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события на то же время, что и урок",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent2\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt2\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName2\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Событие2\",\r\n    \"startAt\": \"{{startLesson}}\",\r\n    \"endAt\": \"{{endLesson}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent2\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startLesson}}\",\r\n    \"till\": \"{{endLesson}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие и урок есть в календаре",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Урок отображается\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.classId === pm.collectionVariables.get(\"idClass\"))\r",
															"pm.expect(event).not.eq(undefined); });\r",
															"\r",
															"pm.test(\"Cобытие отображается\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent2\"))\r",
															"pm.expect(event).not.eq(undefined); });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startLesson}}\",\r\n    \"till\": \"{{endLesson}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent2}},\r\n    \"startAt\": \"{{startAt2}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startLesson}}\",\r\n    \"till\": \"{{endLesson}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка описания",
							"item": [
								{
									"name": "Описание с кириллицей",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с кириллицей в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Тестирование\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с кириллицей в описании в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с кириллицей в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с кириллицей в описании удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Описание с латиницей",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с латиницей в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Exercise\",\r\n    \"title\": \"Задание2\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с латиницей в описании в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с латиницей в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с латиницей в описании удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Описание с цифрами",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с цифрами в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с цифрами в описании в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с цифрами в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с цифрами в описании удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Описание с пробелами",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с пробелами в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с пробелами в описании в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с пробелами в описании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с пробелами в описании удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Описание пустое",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события с пустым описанием",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(3, 'hour').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(3, 'hour').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события с пустым описанием в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события с пустым описанием",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие с пустым описанием удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Проверка выбора цвета",
							"item": [
								{
									"name": "Событие серого цвета",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события серого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"Exercise\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события серого цвета в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события серого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие серого цвета удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "События желтого цвета",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события желтого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события желтого цвета в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события желтого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие желтого цвета удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие зеленого цвета",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события зеленого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события зеленого цвета в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события зеленого цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие зеленого цвета удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Событие розового цвета",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание события розового цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(1, 'months').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(1, 'months').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Задание2\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события розового цвета в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление события розового цвета",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие розового цвета удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Невалидные проверки",
					"item": [
						{
							"name": "Название пустое",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события с пустым названием",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(3, 'hour').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().subtract(3, 'hour').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Название, превышающее 40 символов",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события с названием, превышающем 40 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().add(3, 'hour').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(3, 'hour').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Тестирование\",\r\n    \"title\": \"ualfwzicmgpufpcfvrbzpjcjspeclpkgevaqmpzwq\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Некорректная дата",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 00 в дне",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-07-00T10:30:00+04:00\",\r\n    \"endAt\": \"2023-07-00T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 00 в месяце",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-00-12T10:30:00+04:00\",\r\n    \"endAt\": \"2023-00-12T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 00 в году",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"0000-08-12T10:30:00+04:00\",\r\n    \"endAt\": \"0000-08-12T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 13 в месяце",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-13-12T10:30:00+04:00\",\r\n    \"endAt\": \"2023-13-12T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 32 янв",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-01-32T10:30:00+04:00\",\r\n    \"endAt\": \"2023-01-32T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 31 апр",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-04-31T10:30:00+04:00\",\r\n    \"endAt\": \"2023-04-31T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 29 фев невис",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-02-29T10:30:00+04:00\",\r\n    \"endAt\": \"2023-02-29T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: 30 фев вис Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2024-02-30T10:30:00+04:00\",\r\n    \"endAt\": \"2024-02-30T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: некорректный формат 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-07-3/0T10:30:00+04:00\",\r\n    \"endAt\": \"2023-07-30T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события: некорректный формат",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"2023-07-30T10:30:00+04:00\",\r\n    \"endAt\": \"2023-0,7-30T11:30:00+04:00\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие не добавилось\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Пустая дата",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события с пустой датой",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Exercise\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"\",\r\n    \"endAt\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'months').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'months').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Невыбранный цвет",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события с невыбранным цветом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//var key = \"idEvent\"\r",
													"//var value = pm.response.json().data.payload.id\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"startAt\"\r",
													"//var value = pm.response.json().data.startAt\r",
													"\r",
													"//pm.collectionVariables.set(key, value);\r",
													"\r",
													"//var key = \"eventName\"\r",
													"//var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"//pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(5, 'minute').startOf('minute').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(14, 'minute').endOf('minute').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Описание больше 500 символов",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание события с описанием, превышающем 500 символов",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"/*var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"*/\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().add(1, 'months').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(1, 'months').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"gcjytsrumzgprianlptnzirznbjloogcjvgafdsvwjmlmfyomyanixdqptfxyneunxbhcjbfttjilleabovvitcigmqiuzemldqslucbritedzxhplvyljzwxcmbkedduibawemwghrhdktrujtmkygfezjpmwqkthzlozmozxspjqyeeepoiuopasfvdjjwbhlqduycllyfovprbwmlxdftgszqrepgajvrdbryxqmoqyyscybhvcckkabkdfbesbkbvueugjqyltjuavrcyudfzlhntlufmjyuaryevrlyqavnsjfqmfsiyattvavruhjcmnlaspuxdpcwfrvymbiforsgmajuyxbaozpzbzlqdkngkbaxkujalvquhzhdxalxewcwohfsoomjzaapdmukjpphztkkytakzzwbkhdcgeqryleotzibjiyusgjtlhyaejynojeucilnraqyqivdrfisxlexnvkhnsqansdnmqesmnmuq\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'months').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'months').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Редактирование Личного события",
			"item": [
				{
					"name": "Валидные проверки",
					"item": [
						{
							"name": "Изменение только названия",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование только названия",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEventUpd\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"updatePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие отредактированное событие сохранилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие обновлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Изменение только даты",
							"item": [
								{
									"name": "Дата из будущего в прошлое",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(2, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(2, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().add(2, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(2, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(2, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(2, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование только даты (из будущего в прошлое)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEventUpd\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAtUpd', moment().subtract(3, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEventUpd', moment().subtract(3, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAtUpd}}\",\r\n    \"endAt\": \"{{endAtEventUpd}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"updatePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие отредактированное событие сохранилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие обновлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(3, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(3, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAtUpd}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Дата из прошлого в будущее",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'month').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'month').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(1, 'month').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'month').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'month').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'month').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование только даты (из прошлого в будущее)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEventUpd\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAtUpd', moment().add(7, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEventUpd', moment().add(7, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAtUpd}}\",\r\n    \"endAt\": \"{{endAtEventUpd}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"updatePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие отредактированное событие сохранилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие обновлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(7, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(7, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAtUpd}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Дата из настоящего в прошлое",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(30, 'minute').startOf('minute').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(29, 'minute').endOf('minute').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование только даты (из настоящего в прошлое)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEventUpd\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAtUpd', moment().subtract(7, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEventUpd', moment().subtract(7, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAtUpd}}\",\r\n    \"endAt\": \"{{endAtEventUpd}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"updatePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие отредактированное событие сохранилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие обновлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(7, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(7, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAtUpd}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Дата из настоящего в будущее",
									"item": [
										{
											"name": "Получение расписания",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Создание персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEvent\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"startAt\"\r",
															"var value = pm.response.json().data.startAt\r",
															"\r",
															"pm.collectionVariables.set(key, value);\r",
															"\r",
															"var key = \"eventName\"\r",
															"var value = pm.response.json().data.payload.payload.title\r",
															"\r",
															"pm.collectionVariables.set(key, value)\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAt', moment().subtract(30, 'minute').startOf('minute').format());\r",
															"pm.collectionVariables.set('endAtEvent', moment().add(29, 'minute').endOf('minute').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/createPersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"createPersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Поиск события в расписании",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие добавлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Редактирование только даты (из настоящего в будущее)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var key = \"idEventUpd\"\r",
															"var value = pm.response.json().data.payload.id\r",
															"\r",
															"pm.collectionVariables.set(key, value);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startAtUpd', moment().add(14, 'day').startOf('hour').format());\r",
															"pm.collectionVariables.set('endAtEventUpd', moment().add(14, 'day').endOf('hour').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAtUpd}}\",\r\n    \"endAt\": \"{{endAtEventUpd}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"updatePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие отредактированное событие сохранилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие обновлено\", function () {\r",
															"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
															"pm.expect(event).not.eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"pm.collectionVariables.set('startOfCalendar', moment().add(14, 'day').startOf('day').format());\r",
															"pm.collectionVariables.set('endOfCalenar', moment().add(14, 'day').endOf('day').format());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										},
										{
											"name": "Удаление персонального события",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAtUpd}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/removePersonal",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"removePersonal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Проверка того, что событие удалилось",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
															"\r",
															"pm.expect(event).eq(undefined); });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "token_global={{myToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v2/schedule/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v2",
														"schedule",
														"events"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Изменение только описания",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование только описания",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEventUpd\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Разбор домашнего задания\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"updatePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие отредактированное событие сохранилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие обновлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Изменение только цвета",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F4F5F6\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#81888D\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование только цвета",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEventUpd\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"updatePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие отредактированное событие сохранилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие обновлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Изменение всех параметров сразу",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Редактирование всех параметров",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEventUpd\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAtUpd', moment().add(3, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEventUpd', moment().add(3, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Exercise\",\r\n    \"title\": \"Проверка задания\",\r\n    \"startAt\": \"{{startAtUpd}}\",\r\n    \"endAt\": \"{{endAtEventUpd}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"updatePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие отредактированное событие сохранилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие обновлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(3, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(3, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAtUpd}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Невалидные проверки",
					"item": [
						{
							"name": "Без изменений, только сохранение",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Сохранение события без редактирования",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEventUpd\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#F9EBFF\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#D478F1\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\",\r\n    \"id\": {{idEvent}},\r\n    \"oldStartAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/updatePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"updatePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что отредактированное событие сохранилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие обновлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEventUpd\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEventUpd}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Удаление Личного события",
			"item": [
				{
					"name": "Валидные проверки",
					"item": [
						{
							"name": "Событие из прошлого",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().subtract(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Событие из будущего",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().add(1, 'day').startOf('hour').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(1, 'day').endOf('hour').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#EBFDF2\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#43B658\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().add(1, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().add(1, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Событие из настоящего",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(30, 'minute').startOf('minute').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(29, 'minute').endOf('minute').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"Урок\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Невалидные проверки",
					"item": [
						{
							"name": "Несуществующее событие",
							"item": [
								{
									"name": "Получение расписания",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Создание персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var key = \"idEvent\"\r",
													"var value = pm.response.json().data.payload.id\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"startAt\"\r",
													"var value = pm.response.json().data.startAt\r",
													"\r",
													"pm.collectionVariables.set(key, value);\r",
													"\r",
													"var key = \"eventName\"\r",
													"var value = pm.response.json().data.payload.payload.title\r",
													"\r",
													"pm.collectionVariables.set(key, value)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startAt', moment().subtract(30, 'minute').startOf('minute').format());\r",
													"pm.collectionVariables.set('endAtEvent', moment().add(29, 'minute').endOf('minute').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"backgroundColor\": \"#FFF7C7\", //#F4F5F6 - серый, #FFF7C7 - желтый, #EBFDF2 - зеленый, #F9EBFF - розовый\r\n    \"color\": \"#FAC641\", //#81888D - серый, #FAC641 - желтый, #43B658 - зеленый, #D478F1 - розовый\r\n    \"description\": \"Урок7\",\r\n    \"title\": \"test42\",\r\n    \"startAt\": \"{{startAt}}\",\r\n    \"endAt\": \"{{endAtEvent}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/createPersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"createPersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск события в расписании",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие добавлено\", function () {\r",
													"     const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"pm.expect(event).not.eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.collectionVariables.set('startOfCalendar', moment().subtract(0, 'day').startOf('day').format());\r",
													"pm.collectionVariables.set('endOfCalenar', moment().subtract(0, 'day').endOf('day').format());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Удаление персонального события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Проверка того, что событие удалилось",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Событие удалено\", function () { const event = pm.response.json().data.events.find(event => event.payload.id === pm.collectionVariables.get(\"idEvent\"))\r",
													"\r",
													"pm.expect(event).eq(undefined); });"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from\": \"{{startOfCalendar}}\",\r\n    \"till\": \"{{endOfCalenar}}\",\r\n    \"onlyTypes\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"events"
											]
										}
									},
									"response": []
								},
								{
									"name": "Повторное удаление события",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 or 4XX\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400, 403, 405, 422,], \"Это баг\");\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.text();\r",
													"\r",
													"pm.test(\"ERROR\", function(){\r",
													"    pm.expect(responseBody).to.include(\"\\\"error\\\":\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token_global={{myToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": {{idEvent}},\r\n    \"startAt\": \"{{startAt}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v2/schedule/removePersonal",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v2",
												"schedule",
												"removePersonal"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api-teachers.skyeng.ru",
			"type": "string"
		},
		{
			"key": "myToken",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VySWQiOjE0NTk2OTMzLCJpZGVudGl0eSI6InRlc3QudHN0MzE3QHNreWVuZy5ydSIsImlkZW50aXR5TG9naW4iOm51bGwsImlkZW50aXR5RW1haWwiOiJ0ZXN0LnRzdDMxN0Bza3llbmcucnUiLCJpZGVudGl0eVBob25lIjpudWxsLCJuYW1lIjoidGVzdCIsInN1cm5hbWUiOiJ0ZXN0IiwiZW1haWwiOiJ0ZXN0LnRzdDMxN0Bza3llbmcucnUiLCJ1aUxhbmd1YWdlIjoicnUiLCJsb2NhbGUiOiJydSIsInNlcnZpY2VMb2NhbGUiOm51bGwsInVhcyI6MzAsImp3dFR5cGUiOjEsImp0aSI6ImNsZGtXbEVNTGZzQWtZeW5sQzE5TzlQUjdyaW5yTTU5IiwiYnJhbmQiOm51bGwsImV4cCI6MTY4ODk2NzI4OSwiYXZhdGFyVXJsIjoiaHR0cHM6XC9cL2F1dGgtYXZhdGFycy1za3llbmcuaW1naXgubmV0XC8xNDU5NjkzM1wvOThmNmJlYjUtZjA3Yi00MWViLThiYzItNDU3MTQwYTc0ODgzP2F1dG89Zm9ybWF0JTJDZW5oYW5jZSZmaXQ9Y3JvcCZoPTIwMCZpeGxpYj1waHAtMi4xLjEmcT03NSZzYXQ9OCZzaGFycD0xMCZ2aWI9OCZ3PTIwMCIsImFJc1N0cm9uZyI6dHJ1ZSwiYVR5cGUiOiJVU0VSTkFNRV9QQVNTV09SRCIsImFUaW1lIjoxNjg4ODgwODg2LCJyb2xlcyI6WyJST0xFX1RFQUNIRVJfQ0FORElEQVRFIiwiUk9MRV9URUFDSEVSX0NBTkRJREFURV9CQVNFX0FDQ0VTUyIsIlJPTEVfVFRDX1VTQUdFIiwiUk9MRV9WSU1CT1hfVEVBQ0hFUl9VU0FHRSIsIlJPTEVfVEVBQ0hFUiIsIlJPTEVfQ1JNMl9URUFDSEVSX0FDQ0VTUyIsIlJPTEVfTUFUSF9URUFDSEVSIiwiUk9MRV9NQVRIX0NPTlRFTlRfVEhFTUVfVklFVyJdfQ.rMfyCcXIUqb0HIGCqgHqlQuRglZbbhncBzvB2mowRAITvBt8FpdItFD81zYIZGVczTSAzvPs7gEmRpgxqi7DZhnoRi_1MacxSG2_A3BllLZ54XDPh_DRGwmq7Ygpm5uH2uhTvxxTfeIZjCV4U4s0jZD7vfV_xKl81cAjhwFP3YIuh7u8_2ZXM98h86rbX7oepvilSOq54ip7yvN2Og3d8yyreMfoC48Wb-Q6bFFLdLQgXAdgCBv9c9A6P59zyBVgJn4GiC56VYj7iPs4bOBG-DJsQWOP23S10WKcZBL-lTt7k-tn5T5vLEZhn_PaXRW9kjR8P70zEUm5CtFfnLUxxuCyFOMT2ZmgSu2Sk_r3j_ESE5jJW5s0zwSU_2iOgzvSzYiokdkHqQZMxGQHiiWJN2jEavx6Ol6ojfSol_O_fMC2-iMuk1_DMNptX6h9_8Rqq0xXySKD8_ViUe_fQAuB06_K6ecm8RCNZHiSkZwBF8O7tkD8_uIJ8sBoGtJWbumNOsPyRfpXj-DnH9pmAS4nFoMJkYLKKy7M9ccE4mRLpod1feBCkAsABN1GA3wJiZ_P4Pqw19CTLMII5AFH9u5WZ6u2UjN1hMr5x-aXbrnOb153PBl2FH0qG8BGhCnrfnGqmVwXyUFeRm37fiq1wLKN2tWvSik-qHefpo2ggKLqlss",
			"type": "string"
		},
		{
			"key": "idEvent",
			"value": ""
		},
		{
			"key": "idEventUpd",
			"value": ""
		},
		{
			"key": "eventName",
			"value": ""
		},
		{
			"key": "startAt",
			"value": ""
		},
		{
			"key": "startOfCalendar",
			"value": ""
		},
		{
			"key": "endOfCalenar",
			"value": ""
		},
		{
			"key": "endAtEvent",
			"value": ""
		},
		{
			"key": "enfOfCalenar",
			"value": ""
		},
		{
			"key": "startAt2",
			"value": ""
		},
		{
			"key": "endAtEvent2",
			"value": ""
		},
		{
			"key": "idEvent2",
			"value": ""
		},
		{
			"key": "eventName2",
			"value": ""
		},
		{
			"key": "startAtUpd",
			"value": ""
		},
		{
			"key": "endAtEventUpd",
			"value": ""
		},
		{
			"key": "startLesson",
			"value": ""
		},
		{
			"key": "idClass",
			"value": ""
		},
		{
			"key": "endLesson",
			"value": ""
		}
	]
}